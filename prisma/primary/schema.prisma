// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIMARY_DATABASE_URL")
}

enum PermissionAction {
  CREATE
  UPDATE
  DELETE
  READ
}

model SessionToken {
  token          String    @id
  revoke         Boolean   @default(false)
  isRefreshToken Boolean   @default(false)
  accountId      String    @db.Uuid
  account        Account   @relation(fields: [accountId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?

  @@map("session_token")
}

model Permission {
  id                     String                  @id @default(uuid())
  subject                String
  action                 PermissionAction
  projectRolePermissions ProjectRolePermission[]

  @@unique([subject, action])
  @@map("permission")
}

model Account {
  id                   String                @id @default(uuid()) @db.Uuid
  username             String                @db.VarChar(24)
  password             String
  projectAccounts      ProjectAccount[]
  essionTokens         SessionToken[]
  accountConfiguration AccountConfiguration?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?

  @@unique([username])
  @@map("account")
}

model AccountConfiguration {
  accountId String  @id @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])
  isActive  Boolean @default(true)

  @@map("account_configuration")
}

model Project {
  id                     String                  @id @default(uuid()) @db.Uuid
  title                  String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?
  projectRoles           ProjectRole[]
  projectRolePermissions ProjectRolePermission[]
  inspectionLocations    InspectionLocation[]
  imsiCatchersList       ImsiCatcher[]
  LicensePlate           LicensePlate[]
  Vehicle                Vehicle[]
  projectAccounts        ProjectAccount[]
  deletedAt              DateTime?
  deleteBy               String?

  @@unique([title])
  @@map("project")
}

model ProjectRole {
  id                     String                  @id @default(uuid()) @db.Uuid
  projectId              String                  @db.Uuid
  project                Project                 @relation(fields: [projectId], references: [id])
  title                  String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  deletedAt              DateTime?
  projectRolePermissions ProjectRolePermission[]
  projectAccounts        ProjectAccount[]

  @@unique([projectId, title])
  @@map("project_role")
}

model ProjectRolePermission {
  id           String      @id @default(uuid()) @db.Uuid
  projectId    String      @db.Uuid
  project      Project     @relation(fields: [projectId], references: [id])
  roleId       String      @db.Uuid
  role         ProjectRole @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("project_role_permission")
}

model ProjectAccount {
  id        String      @id @default(uuid()) @db.Uuid
  projectId String      @db.Uuid
  project   Project     @relation(fields: [projectId], references: [id])
  accountId String      @db.Uuid
  account   Account     @relation(fields: [accountId], references: [id])
  roleId    String      @db.Uuid
  role      ProjectRole @relation(fields: [roleId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@map("project_account")
}

model InspectionLocation {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @db.Uuid
  project     Project   @relation(fields: [projectId], references: [id])
  title       String
  description String?
  tags        String[]  @default([])
  latitude    Decimal   @db.Decimal(8, 6)
  longtitude  Decimal   @db.Decimal(9, 6)
  createdBy   String
  updatedBy   String?
  deleteBy    String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  vehicles    Vehicle[]

  @@map("inspection_location")
}

model LicensePlate {
  id                   String    @id @default(uuid()) @db.Uuid
  projectId            String    @db.Uuid
  project              Project   @relation(fields: [projectId], references: [id])
  licensePlate         String    @db.VarChar(24)
  licensePlateProvince String
  isBlacklist          Boolean   @default(false)
  Vehicle              Vehicle[]

  @@index([licensePlate])
  @@index([licensePlateProvince])
  @@map("license_plate")
}

model Vehicle {
  id                   String             @id @default(uuid()) @db.Uuid
  projectId            String             @db.Uuid
  project              Project            @relation(fields: [projectId], references: [id])
  inspectionLocationId String             @db.Uuid
  inspectionLocation   InspectionLocation @relation(fields: [inspectionLocationId], references: [id])
  licensePlateId       String             @db.Uuid
  licensePlate         LicensePlate       @relation(fields: [licensePlateId], references: [id])
  brand                String
  color                String
  country              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime?
  images               VehicleImage[]
  VehicleImsi          VehicleImsi[]

  @@map("vehicle")
}

model VehicleImage {
  id        String   @id @default(uuid()) @db.Uuid
  vehicleId String   @db.Uuid
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  s3Key     String
  createdAt DateTime @default(now())

  @@map("vehicle_image")
}

model VehicleImsi {
  id               String      @id @default(uuid()) @db.Uuid
  imsiCatcherId    String      @db.Uuid
  vehicleId        String      @db.Uuid
  vehicle          Vehicle     @relation(fields: [vehicleId], references: [id])
  imsi             ImsiCatcher @relation(fields: [imsiCatcherId], references: [id])
  imei             String      @db.VarChar(24)
  signalStrength   Float
  registerDateTime DateTime
  createdAt        DateTime    @default(now())

  @@index([imei])
  @@map("vehivle_imsi")
}

model ImsiCatcher {
  id          String        @id @default(uuid()) @db.Uuid
  projectId   String        @db.Uuid
  project     Project       @relation(fields: [projectId], references: [id])
  imsi        String        @db.VarChar(24)
  isBlacklist Boolean       @default(false)
  createdAt   DateTime      @default(now())
  VehicleImsi VehicleImsi[]

  @@index([imsi])
  @@map("imsi_catcher")
}
