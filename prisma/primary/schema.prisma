generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIMARY_DATABASE_URL")
}

enum ImageType {
  FRONT
  REAR
  DRIVER
  LICENSE_PLATE
}

enum DeviceStatus {
  ONLINE
  OFFLINE
}

enum PermissionAction {
  CREATE
  UPDATE
  DELETE
  READ
}

enum BlacklistPriority {
  WARNING
  DANGER
  NORMAL
}

enum DevicePermittedLabel {
  WHITELIST
  BLACKLIST
  NONE
}

enum StationStatus {
  ONLINE
  OFFLINE
  CLOSED
  MAINTENANCE
}

enum RemarkState {
  WHITELIST
  BLACKLIST
  IN_QUEUE
  IN_PROGRESS
  PASSED
  WAITING
  INVESTIGATING
  SUSPICION
}

model SessionToken {
  token          String    @id
  revoke         Boolean   @default(false)
  isRefreshToken Boolean   @default(false)
  accountId      String    @db.Uuid
  account        Account   @relation(fields: [accountId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?

  @@map("session_token")
}

model Permission {
  id                     String                  @id @db.Uuid
  subject                String
  action                 PermissionAction
  projectRolePermissions ProjectRolePermission[]

  @@unique([subject, action])
  @@map("permission")
}

model Account {
  id                   String                @id @db.Uuid
  username             String                @db.VarChar(24)
  password             String
  projectAccounts      ProjectAccount[]
  sessionTokens        SessionToken[]
  accountConfiguration AccountConfiguration?
  createdBy            String
  updatedBy            String?
  deletedBy            String?
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?

  @@unique([username])
  @@map("account")
}

model AccountConfiguration {
  accountId String  @id @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])
  isActive  Boolean @default(true)

  @@map("account_configuration")
}

model Project {
  id                         String                      @id @db.Uuid
  title                      String
  projectRoles               ProjectRole[]
  projectRolePermissions     ProjectRolePermission[]
  Vehicle                    Vehicle[]
  projectAccounts            ProjectAccount[]
  imsiConfiguration          ImsiConfiguration[]
  imeiConfiguration          ImeiConfiguration[]
  licensePlatesConfiguration LicensePlateConfiguration[]
  mobileDeviceConfiguration  MobileDeviceConfiguration[]
  stationLocations           StationLocation[]
  createdBy                  String
  updatedBy                  String?
  deletedBy                  String?
  deletedAt                  DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime?
  ConfigLineNotify           ConfigLineNotify[]
  Tag                        Tag[]

  @@unique([title])
  @@map("project")
}

model ProjectRole {
  id                     String                  @id @db.Uuid
  projectId              String                  @db.Uuid
  project                Project                 @relation(fields: [projectId], references: [id])
  title                  String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  deletedAt              DateTime?
  projectRolePermissions ProjectRolePermission[]
  projectAccounts        ProjectAccount[]

  @@unique([projectId, title])
  @@map("project_role")
}

model ProjectRolePermission {
  id           String      @id @db.Uuid
  projectId    String      @db.Uuid
  project      Project     @relation(fields: [projectId], references: [id])
  roleId       String      @db.Uuid
  role         ProjectRole @relation(fields: [roleId], references: [id])
  permissionId String      @db.Uuid
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("project_role_permission")
}

model ProjectAccount {
  id             String           @id @db.Uuid
  projectId      String           @db.Uuid
  project        Project          @relation(fields: [projectId], references: [id])
  accountId      String           @db.Uuid
  account        Account          @relation(fields: [accountId], references: [id])
  roleId         String           @db.Uuid
  role           ProjectRole      @relation(fields: [roleId], references: [id])
  isActive       Boolean          @default(true)
  firstname      String?
  lastname       String?
  msisdn         String?
  createdBy      String
  updatedBy      String?
  deletedBy      String?
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  StationOfficer StationOfficer[]

  @@map("project_account")
}

model Tag {
  id                           String                         @id @db.Uuid
  project                      Project                        @relation(fields: [projectId], references: [id])
  projectId                    String                         @db.Uuid
  title                        String
  createdBy                    String
  createdAt                    DateTime                       @default(now())
  ImsiConfigurationTag         ImsiConfigurationTag[]
  ImeiConfigurationTag         ImeiConfigurationTag[]
  MobileDeviceConfigurationTag MobileDeviceConfigurationTag[]
  StationLocationTag           StationLocationTag[]
  LicensePlateConfigurationTag LicensePlateConfigurationTag[]
  VehicleLicensePlateTag       VehicleLicensePlateTag[]
  VehicleTag                   VehicleTag[]

  @@unique([title, projectId])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@map("tag")
}

model ImsiConfigurationTag {
  id                  String            @id @db.Uuid
  imsiConfiguration   ImsiConfiguration @relation(fields: [imsiConfigurationId], references: [id])
  imsiConfigurationId String            @db.Uuid
  tag                 Tag               @relation(fields: [tagId], references: [id])
  tagId               String            @db.Uuid
  createdAt           DateTime          @default(now())
  createdBy           String

  @@map("imsi_configuration_tag")
}

model ImeiConfigurationTag {
  id                  String            @id @db.Uuid
  imeiConfiguration   ImeiConfiguration @relation(fields: [imeiConfigurationId], references: [id])
  imeiConfigurationId String            @db.Uuid
  tag                 Tag               @relation(fields: [tagId], references: [id])
  tagId               String            @db.Uuid
  createdAt           DateTime          @default(now())
  createdBy           String

  @@map("imei_configuration_tag")
}

model MobileDeviceConfigurationTag {
  id                          String                    @id @db.Uuid
  mobileDeviceConfiguration   MobileDeviceConfiguration @relation(fields: [mobileDeviceConfigurationId], references: [id])
  mobileDeviceConfigurationId String                    @db.Uuid
  tag                         Tag                       @relation(fields: [tagId], references: [id])
  tagId                       String                    @db.Uuid
  createdAt                   DateTime                  @default(now())
  createdBy                   String

  @@map("mobile_device_configuration_tag")
}

model StationLocationTag {
  id                String          @id @db.Uuid
  stationLocation   StationLocation @relation(fields: [stationLocationId], references: [id])
  tag               Tag             @relation(fields: [tagId], references: [id])
  stationLocationId String          @db.Uuid
  tagId             String          @db.Uuid
  createdAt         DateTime        @default(now())
  createdBy         String

  @@map("station_location_tag")
}

model LicensePlateConfigurationTag {
  id                          String                    @id @db.Uuid
  licensePlateConfiguration   LicensePlateConfiguration @relation(fields: [licensePlateConfigurationId], references: [id])
  tag                         Tag                       @relation(fields: [tagId], references: [id])
  createdAt                   DateTime                  @default(now())
  licensePlateConfigurationId String                    @db.Uuid
  tagId                       String                    @db.Uuid
  createdBy                   String

  @@map("license_plate_configuration_tag")
}

model VehicleLicensePlateTag {
  id                           String              @id @db.Uuid
  vehicleLicensePlate          VehicleLicensePlate @relation(fields: [vehicleLicensePlateVehicleId], references: [vehicleId])
  tag                          Tag                 @relation(fields: [tagId], references: [id])
  vehicleLicensePlateVehicleId String              @db.Uuid
  tagId                        String              @db.Uuid
  createdAt                    DateTime            @default(now())
  createdBy                    String

  @@map("vehicle_license_plate_tag")
}

model VehicleTag {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  tagId     String   @db.Uuid
  vehicleId String   @db.Uuid
  createdBy String

  @@map("vehicle_tag")
}

model ImsiConfiguration {
  id                        String                      @id @db.Uuid
  projectId                 String                      @db.Uuid
  stationLocationId         String                      @db.Uuid
  project                   Project                     @relation(fields: [projectId], references: [id])
  stationLocation           StationLocation             @relation(fields: [stationLocationId], references: [id])
  imsi                      String                      @db.VarChar(24)
  mnc                       String                      @db.VarChar(3)
  mcc                       String                      @db.VarChar(3)
  permittedLabel            DevicePermittedLabel        @default(NONE)
  blacklistPriority         BlacklistPriority           @default(NORMAL)
  createdBy                 String
  updatedBy                 String?
  deletedBy                 String?
  deletedAt                 DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?
  MobileDeviceConfiguration MobileDeviceConfiguration[]
  ImsiConfigurationTag      ImsiConfigurationTag[]

  @@index([imsi, projectId])
  @@map("imsi_configuration")
}

model ImeiConfiguration {
  id                        String                      @id @db.Uuid
  projectId                 String                      @db.Uuid
  project                   Project                     @relation(fields: [projectId], references: [id])
  stationLocationId         String                      @db.Uuid
  stationLocation           StationLocation             @relation(fields: [stationLocationId], references: [id])
  imei                      String                      @db.VarChar(24)
  permittedLabel            DevicePermittedLabel        @default(NONE)
  blacklistPriority         BlacklistPriority           @default(NORMAL)
  createdBy                 String
  updatedBy                 String?
  deletedBy                 String?
  deletedAt                 DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?
  MobileDeviceConfiguration MobileDeviceConfiguration[]
  ImeiConfigurationTag      ImeiConfigurationTag[]

  @@index([imei, projectId])
  @@map("imei_configuration")
}

model MobileDeviceConfiguration {
  id                           String                         @id @db.Uuid
  projectId                    String                         @db.Uuid
  project                      Project                        @relation(fields: [projectId], references: [id])
  stationLocationId            String                         @db.Uuid
  stationLocation              StationLocation                @relation(fields: [stationLocationId], references: [id])
  title                        String
  referenceImsiConfigurationId String                         @db.Uuid
  referenceImsi                ImsiConfiguration              @relation(fields: [referenceImsiConfigurationId], references: [id])
  referenceImeiConfigurationId String                         @db.Uuid
  referenceImei                ImeiConfiguration              @relation(fields: [referenceImeiConfigurationId], references: [id])
  msisdn                       String?
  permittedLabel               DevicePermittedLabel           @default(NONE)
  blacklistPriority            BlacklistPriority              @default(NORMAL)
  createdBy                    String
  updatedBy                    String?
  deletedBy                    String?
  deletedAt                    DateTime?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime?
  MobileDeviceConfigurationTag MobileDeviceConfigurationTag[]

  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@map("mobile_device_configuration")
}

model StationLocation {
  id                         String                       @id @db.Uuid
  projectId                  String                       @db.Uuid
  project                    Project                      @relation(fields: [projectId], references: [id])
  title                      String
  description                String?
  department                 String
  latitude                   Decimal                      @db.Decimal(8, 6)
  longitude                  Decimal                      @db.Decimal(9, 6)
  createdBy                  String
  updatedBy                  String?
  deletedBy                  String?
  deletedAt                  DateTime?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime?
  vehicles                   Vehicle[]
  remark                     String?
  stationStatus              StationStatus?
  ImsiConfiguration          ImsiConfiguration[]
  ImeiConfiguration          ImeiConfiguration[]
  StationHealthCheckActivity StationHealthCheckActivity[] @relation(name: "activity")
  currentHealthCheckId       String?                      @db.Uuid
  currentHealthCheck         StationHealthCheckActivity?  @relation(name: "current", fields: [currentHealthCheckId], references: [id])
  StationDevice              StationDevice[]
  StationOfficer             StationOfficer[]
  StationLocationTag         StationLocationTag[]
  MobileDeviceConfiguration  MobileDeviceConfiguration[]

  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@map("station_location")
}

model StationOfficer {
  id                String          @id @db.Uuid
  stationLocationId String          @db.Uuid
  stationLocation   StationLocation @relation(fields: [stationLocationId], references: [id])
  projectAccountId  String?         @db.Uuid
  projectAccount    ProjectAccount? @relation(fields: [projectAccountId], references: [id])
  firstname         String
  lastname          String
  msisdn            String          @db.VarChar(10)
  createdBy         String
  updatedBy         String?
  deletedBy         String?
  deletedAt         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?

  @@index([firstname, lastname])
  @@map("station_officer")
}

model StationDevice {
  id                       String                     @id @db.Uuid
  station                  StationLocation            @relation(fields: [stationLocationId], references: [id])
  stationLocationId        String                     @db.Uuid
  title                    String
  softwareVersion          String?
  hardwareVersion          String?
  StationDeviceHealthCheck StationDeviceHealthCheck[]
  createdBy                String
  updatedBy                String?
  deletedBy                String?
  deletedAt                DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime?

  @@map("station_device")
}

model StationDeviceHealthCheck {
  id              String        @id @db.Uuid
  stationDeviceId String        @db.Uuid
  stationDevice   StationDevice @relation(fields: [stationDeviceId], references: [id])
  status          DeviceStatus
  issue           String? // OFFLINE issue
  createdAt       DateTime      @default(now())

  @@map("station_device_health_check")
}

model StationHealthCheckActivity {
  id              String            @id @db.Uuid
  stationId       String            @db.Uuid
  station         StationLocation   @relation(name: "activity", fields: [stationId], references: [id])
  stationStatus   StationStatus
  startDatetime   DateTime
  endDatetime     DateTime?
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedBy       String?
  updatedAt       DateTime?
  StationLocation StationLocation[] @relation(name: "current")

  @@map("station_health_check_activity")
}

model LicensePlateConfiguration {
  id                           String                         @id @db.Uuid
  projectId                    String                         @db.Uuid
  project                      Project                        @relation(fields: [projectId], references: [id])
  prefix                       String                         @db.VarChar(4)
  number                       String                         @db.VarChar(24)
  province                     String
  type                         String // รถส่วนบุคคล
  country                      String?
  permittedLabel               DevicePermittedLabel           @default(NONE)
  blacklistPriority            BlacklistPriority              @default(NORMAL)
  createdBy                    String
  updatedBy                    String?
  deletedBy                    String?
  deletedAt                    DateTime?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime?
  LicensePlateConfigurationTag LicensePlateConfigurationTag[]

  @@index([prefix])
  @@index([number, prefix])
  @@index([number, prefix, province])
  @@map("license_plate_configuration")
}

model Vehicle {
  id                  String                @id @db.Uuid
  projectId           String                @db.Uuid
  project             Project               @relation(fields: [projectId], references: [id])
  stationLocationId   String                @db.Uuid
  stationLocation     StationLocation       @relation(fields: [stationLocationId], references: [id])
  brand               String
  color               String
  model               String
  status              RemarkState?
  vehicleLicensePlate VehicleLicensePlate?
  images              VehicleImage[]
  mobileDevices       VehicleMobileDevice[]
  createdBy           String
  updatedBy           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?
  VehicleTag          VehicleTag[]

  @@index([brand])
  @@index([color])
  @@index([model])
  @@map("vehicle")
}

model VehicleLicensePlate {
  vehicleId              String                   @id @db.Uuid
  vehicle                Vehicle                  @relation(fields: [vehicleId], references: [id])
  prefix                 String                   @db.VarChar(4)
  number                 String                   @db.VarChar(8)
  province               String                   @db.VarChar(32)
  type                   String // white, red, yellow
  country                String?
  accuracy               Decimal
  permittedLabel         DevicePermittedLabel?    @default(NONE)
  blacklistPriority      BlacklistPriority?       @default(NORMAL)
  s3Key                  String?
  createdBy              String
  updatedBy              String?
  deletedBy              String?
  deletedAt              DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  VehicleLicensePlateTag VehicleLicensePlateTag[]

  @@index([prefix])
  @@index([number, prefix])
  @@index([number, prefix, province])
  @@map("vehicle_license_plate")
}

model VehicleImage {
  id        String    @id @db.Uuid
  vehicleId String    @db.Uuid
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
  type      ImageType
  s3Key     String
  createdBy String
  updatedBy String?
  deletedBy String?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@map("vehicle_image")
}

model VehicleMobileDevice {
  id               String               @id @db.Uuid
  vehicleId        String               @db.Uuid
  vehicle          Vehicle              @relation(fields: [vehicleId], references: [id])
  remarkStatus     RemarkState          @default(IN_PROGRESS)
  imsi             String               @db.VarChar(24)
  mnc              String               @db.VarChar(3)
  mcc              String               @db.VarChar(3)
  imei             String?              @db.VarChar(24)
  permittedLabel   DevicePermittedLabel @default(NONE)
  signalStrength   Float
  registerDateTime DateTime
  createdBy        String
  updatedBy        String?
  deletedBy        String?
  deletedAt        DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime?

  @@index([mnc, mcc])
  @@index([imei, imsi])
  @@map("vehicle_imsi")
}

model ConfigLineNotify {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id])
  accountId String   @db.Uuid
  name      String
  note      String?
  token     String   @unique
  active    Boolean  @default(false)
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("config_line_notify")
}
