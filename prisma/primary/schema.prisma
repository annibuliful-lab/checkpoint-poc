generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIMARY_DATABASE_URL")
}

enum PermissionAction {
  CREATE
  UPDATE
  DELETE
  READ
}

enum DeviceCaptureStatus {
  WHITELIST
  BLACKLIST
}

enum RemarkState {
  WHITELIST
  BLACKLIST
  IN_QUEUE
  IN_PROGRESS
  PASSED
  WAITING
  INVESTIGATING
  SUSPICION
}

model SessionToken {
  token          String    @id
  revoke         Boolean   @default(false)
  isRefreshToken Boolean   @default(false)
  accountId      String    @db.Uuid
  account        Account   @relation(fields: [accountId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?

  @@map("session_token")
}

model Permission {
  id                     String                  @id @default(uuid())
  subject                String
  action                 PermissionAction
  projectRolePermissions ProjectRolePermission[]

  @@unique([subject, action])
  @@map("permission")
}

model Account {
  id                   String                @id @default(uuid()) @db.Uuid
  username             String                @db.VarChar(24)
  password             String
  projectAccounts      ProjectAccount[]
  essionTokens         SessionToken[]
  accountConfiguration AccountConfiguration?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?

  @@unique([username])
  @@map("account")
}

model AccountConfiguration {
  accountId String  @id @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])
  isActive  Boolean @default(true)

  @@map("account_configuration")
}

model Project {
  id                         String                      @id @default(uuid()) @db.Uuid
  title                      String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime?
  projectRoles               ProjectRole[]
  projectRolePermissions     ProjectRolePermission[]
  inspectionLocations        InspectionLocation[]
  Vehicle                    Vehicle[]
  projectAccounts            ProjectAccount[]
  deletedAt                  DateTime?
  deleteBy                   String?
  imsiConfiguration          ImsiConfiguration[]
  imeiConfiguration          ImeiConfiguration[]
  licensePlatesConfiguration LicensePlateConfiguration[]

  @@unique([title])
  @@map("project")
}

model ProjectRole {
  id                     String                  @id @default(uuid()) @db.Uuid
  projectId              String                  @db.Uuid
  project                Project                 @relation(fields: [projectId], references: [id])
  title                  String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  deletedAt              DateTime?
  projectRolePermissions ProjectRolePermission[]
  projectAccounts        ProjectAccount[]

  @@unique([projectId, title])
  @@map("project_role")
}

model ProjectRolePermission {
  id           String      @id @default(uuid()) @db.Uuid
  projectId    String      @db.Uuid
  project      Project     @relation(fields: [projectId], references: [id])
  roleId       String      @db.Uuid
  role         ProjectRole @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("project_role_permission")
}

model ProjectAccount {
  id        String      @id @default(uuid()) @db.Uuid
  projectId String      @db.Uuid
  project   Project     @relation(fields: [projectId], references: [id])
  accountId String      @db.Uuid
  account   Account     @relation(fields: [accountId], references: [id])
  roleId    String      @db.Uuid
  role      ProjectRole @relation(fields: [roleId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@map("project_account")
}

model ImsiConfiguration {
  id        String              @id @default(uuid()) @db.Uuid
  projectId String              @db.Uuid
  project   Project             @relation(fields: [projectId], references: [id])
  imsi      String              @db.VarChar(24)
  createdAt DateTime            @default(now())
  updatedAt DateTime?
  status    DeviceCaptureStatus

  @@unique([imsi])
  @@map("imsi_catcher")
}

model ImeiConfiguration {
  id        String              @id @default(uuid()) @db.Uuid
  projectId String              @db.Uuid
  project   Project             @relation(fields: [projectId], references: [id])
  imei      String              @db.VarChar(24)
  status    DeviceCaptureStatus
  createdAt DateTime            @default(now())
  updatedAt DateTime?

  @@index([imei])
  @@map("imei_catcher")
}

model InspectionLocation {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @db.Uuid
  project     Project   @relation(fields: [projectId], references: [id])
  title       String
  description String?
  tags        String[]  @default([])
  latitude    Decimal   @db.Decimal(8, 6)
  longtitude  Decimal   @db.Decimal(9, 6)
  createdBy   String
  updatedBy   String?
  deleteBy    String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  vehicles    Vehicle[]

  @@map("inspection_location")
}

model LicensePlateConfiguration {
  id        String              @id @default(uuid()) @db.Uuid
  projectId String              @db.Uuid
  project   Project             @relation(fields: [projectId], references: [id])
  prefix    String
  number    String              @db.VarChar(24)
  province  String
  country   String?
  status    DeviceCaptureStatus

  @@index([number, prefix])
  @@index([number, prefix, province])
  @@map("license_plate")
}

model Vehicle {
  id                   String                @id @default(uuid()) @db.Uuid
  projectId            String                @db.Uuid
  project              Project               @relation(fields: [projectId], references: [id])
  inspectionLocationId String                @db.Uuid
  inspectionLocation   InspectionLocation    @relation(fields: [inspectionLocationId], references: [id])
  brand                String
  color                String
  status               RemarkState           @default(IN_PROGRESS)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?
  vehicleLicensePlate  VehicleLicensePlate?
  images               VehicleImage[]
  mobileDevices        VehicleMobileDevice[]

  @@map("vehicle")
}

model VehicleLicensePlate {
  vehicleId String               @id @db.Uuid
  vehicle   Vehicle              @relation(fields: [vehicleId], references: [id])
  prefix    String               @db.VarChar(4)
  number    String               @db.VarChar(8)
  province  String               @db.VarChar(32)
  country   String?
  status    DeviceCaptureStatus?

  @@map("vehicle_license_plate")
}

model VehicleImage {
  id        String               @id @default(uuid()) @db.Uuid
  vehicleId String               @db.Uuid
  vehicle   Vehicle              @relation(fields: [vehicleId], references: [id])
  s3Key     String
  createdAt DateTime             @default(now())
  status    DeviceCaptureStatus?

  @@map("vehicle_image")
}

model VehicleMobileDevice {
  id               String      @id @default(uuid()) @db.Uuid
  vehicleId        String      @db.Uuid
  vehicle          Vehicle     @relation(fields: [vehicleId], references: [id])
  labelStatus      RemarkState @default(IN_PROGRESS)
  imsi             String      @db.VarChar(24)
  imei             String      @db.VarChar(24)
  signalStrength   Float
  registerDateTime DateTime
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?

  @@index([imei, imsi])
  @@map("vehicle_imsi")
}
